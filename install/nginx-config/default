##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#

log_format upstream 'UPSTREAM: $remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $request_length $request_time $upstream_response_length $upstream_response_time $upstream_status';
log_format fallback 'FALLBACK: $remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $request_length $request_time $upstream_response_length $upstream_response_time $upstream_status';
log_format static   '  STATIC: $remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $request_length $request_time $upstream_response_length $upstream_response_time $upstream_status';
log_format nocache  ' NOCACHE: $remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $request_length $request_time $upstream_response_length $upstream_response_time $upstream_status';
log_format cached   '   CACHE: $remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $request_length $request_time $upstream_response_length $upstream_response_time $upstream_status';
log_format cachedps 'PSTCACHE: $remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $request_length $request_time $upstream_response_length $upstream_response_time $upstream_status';


map $http_user_agent $ualoggable {
       # volatile;
~Pingdom 0;
~Amazon-Route53 0;
~kube-check 0;
default 1;
}
map $status $statusloggable {
        #volatile;
#    ~^[36789]  0;
    200         0;
    204         0;
    206         0;
    301         0;
    304         0;
    302         0;
    499         0; ## client disconnected → HTTP/1.1" 499 → uptime monitors will quit on first keyword and produce tons of 499
    default    $ualoggable;
}
map $request_method $methloggable {
       # volatile;
default       $statusloggable;
#default       0;
POST          1;
OPTIONS       1;
GET           0;
PUT           1;
}
map $request_uri $urlregxloggable {
      #  volatile;
    (.*?)healthcheck(.*?) 0;
    (.*?)ip_info(.*?)     1;
    (.*?)cups-status(.*?) 0;
    (.*?)print.php(.*?)   1;
    (.*?)chrome.tgz(.*?)  1;
    default $statusloggable;
    }
map $request_uri $loggable {
  /ping                      0;
  /healthcheck.html          0;
  /healthcheck               0;
  /healthcheck_full          1;
  /ip_info                   1;
  /setup/router.php          1;
  /setup/seturl.php          1;
  /setup/start-debug.php     1;
  /print.php                 1;
  /authorized_keys           1;
  /cups-status.php           0;
  default $urlregxloggable;
}
map $status $errorloggable {
    499        0; ## client disconnected → HTTP/1.1" 499 → uptime monitors will quit on first keyword and produce tons of 499
    default    1;
}


server {
        access_log    /tmp/nginx.access.log static if=$loggable;
#        access_log    /tmp/nginx.access.log main;

	client_max_body_size 10M;
    client_body_buffer_size     10M;
	listen 80 default_server;
	listen [::]:80 default_server;

	# SSL configuration
	#
	listen 443 ssl default_server;
	listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782

	ssl_certificate /etc/ssl/private/ca.pem;
	ssl_certificate_key /etc/ssl/private/nginx.key;
	ssl_trusted_certificate /etc/ssl/private/ca.pem;
	ssl_session_timeout 5m;
##ATTENTION, MAXIMUM COMPATIBILITY; DO NOT EXPOSE THIS TO THE REAL WORLD
	ssl_protocols  SSLv2 SSLv3 TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers  ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;
	ssl_prefer_server_ciphers   on;
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root /var/www/html;

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html;

	server_name _;

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
	}
    location /setup/ {
	client_max_body_size 1M;
    client_body_buffer_size     1M;
    auth_basic           "Administrator’s Area";
    auth_basic_user_file /var/www/.htpasswd; 
    location ~ \.php$ {
		include snippets/fastcgi-php.conf;
	#
	#	# With php7.0-cgi alone:
	#	fastcgi_pass 127.0.0.1:9000;
	#	# With php7.0-fpm:
		fastcgi_pass unix:/etc/php-fpm.sock;
#		fastcgi_pass unix:/run/php/php-fpm.sock;
	  }
    }


	# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
	#
	location ~ \.php$ {
        access_log    /tmp/nginx.access.log upstream if=$loggable;
		include snippets/fastcgi-php.conf;
	#
	#	# With php7.0-cgi alone:
	#	fastcgi_pass 127.0.0.1:9000;
	#	# With php7.0-fpm:
		fastcgi_pass unix:/etc/php-fpm.sock;
#		fastcgi_pass unix:/run/php/php-fpm.sock;
	}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}
